package test;


import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Set;
import java.util.concurrent.TimeUnit;

import org.apache.commons.compress.archivers.dump.InvalidFormatException;
import org.openqa.selenium.Alert;
import org.openqa.selenium.By;
import org.openqa.selenium.NoAlertPresentException;
import org.openqa.selenium.NoSuchWindowException;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebDriverException;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.interactions.Actions;
import org.openqa.selenium.support.ui.Select;
import org.testng.annotations.DataProvider;

public class Common_Methods {

	WebDriver driver;
	static Actions ref;
	private TimeUnit TimeUnits;
	String excelFileName;

	public void startApp_Browser(String browser, String url) {
		try {
			if(browser.equalsIgnoreCase("chrome")) {
				System.setProperty("webdriver.chrome.driver", ".//drivers/chromedriver.exe");
				driver =new ChromeDriver();
			} 
			/*else if(browser.equalsIgnoreCase("firefox")) {
				System.setProperty("webdriver.gecko.driver",
						"./drivers/geckodriver.exe");
				driver = new FirefoxDriver();
			} else if(browser.equalsIgnoreCase("ie")) {
				System.setProperty("webdriver.ie.driver",
						"./drivers/IEDriverServer.exe");
				driver = new InternetExplorerDriver();
			}*/
			driver.navigate().to(url);
			driver.manage().window().maximize();
			driver.manage().timeouts().implicitlyWait(10, TimeUnit.SECONDS);
		} catch (Exception e) {
			System.err.println("The Browser Could not be Launched. Hence Failed");
			throw new RuntimeException();
		} finally {

		}
	}
	public WebElement locateElement(String type, String value)
	{
		try
		{
			switch(type.toLowerCase())
			{
			case"id":return driver.findElement(By.id(value));
			case"name":return driver.findElement(By.name(value));
			case"class":return driver.findElement(By.className(value));
			case"tname":return driver.findElement(By.tagName(value));
			case"link":return driver.findElement(By.linkText(value));
			case"plink":return driver.findElement(By.partialLinkText(value));
			case"xpath":return driver.findElement(By.xpath(value));
			case"css":return driver.findElement(By.cssSelector(value));
			}
		} catch (NoSuchElementException e) {
			System.err.println("The Element with locator:"+type+" Not Found with value: "+value);
			throw new RuntimeException();
		}
		return null;
	}
	public List<WebElement> locateElements(String type, String value) {
		try {
			switch(type.toLowerCase()) {
			case "id": return driver.findElements(By.id(value));
			case "name": return driver.findElements(By.name(value));
			case "class": return driver.findElements(By.className(value));
			case "link": return driver.findElements(By.linkText(value));
			case "xpath": return driver.findElements(By.xpath(value));
			case "css": return driver.findElements(By.cssSelector(value));
			}
		} catch (NoSuchElementException e) {
			System.err.println("The Element with locator:"+type+" Not Found with value: "+value);
			throw new RuntimeException();
		}
		return null;
	}
	public void type(WebElement ele,String value)
	{
		ele.clear();
		ele.sendKeys(value);
	}
	public void selectDropDownUsingText(WebElement ele, String value) {

		new Select(ele).selectByVisibleText(value);
	}


	public void selectDropDownUsingIndex(WebElement ele, int index) {
		new Select(ele)
		.selectByIndex(index);
	}


	public void selectDropDownUsingValue(WebElement ele, String value) {
		new Select(ele)
		.selectByValue(value);
	}
	public void clear(WebElement ele)
	{
		ele.clear();
	}
	public void click(WebElement ele)
	{
		ele.click();
	}
	public String getText(WebElement ele)
	{
		String text=ele.getText();
		return text;
	}
	public int getText1(String value)
	{

		int result = Integer.parseInt(value);	
		return result;
	}
	public boolean action(WebElement ele)
	{
		ref=new Actions(driver);
		ref.moveToElement(ele).click().perform();
		return true;
	}
	public void action1(WebElement ele)
	{
		ref=new Actions(driver);
		ref.moveToElement(ele).click().perform();
	}
	public void close()
	{
		driver.close();
	}
	public void webdriverwait()
	{
		driver.manage().timeouts().implicitlyWait(10, TimeUnits);
	}
	public void sleep() throws InterruptedException
	{
		Thread.sleep(2000);
	}
	public void print(String value)
	{
		System.out.println(value);
	}
	public void printv(int value)
	{
		System.out.println(value);
	}
	public void switchToFrame(int index) {
		driver.switchTo().frame(index);
	}
	public void switchToFrame(WebElement ele) {
		driver.switchTo().frame(ele);
	}
	public void switchToFrame(String idOrName) {
		driver.switchTo().frame(idOrName);
	}
	public void defaultContent() {
		driver.switchTo().defaultContent();
	}

	@DataProvider(name="fetchData")
	public String[][] getData() throws InvalidFormatException, IOException{
		return DataDriverTestdemo.readExcel(excelFileName);
	}

	public boolean verifyEnabled(WebElement ele) {
		try {
			if(ele.isEnabled()) {
				System.out.println("The element "+" is Enabled");
				return true;
			} else {
				System.out.println("The element "+" is not Enabled");
			}
		} catch (WebDriverException e) {
			System.out.println("WebDriverException : "+e.getMessage());
		}
		return false;
	}
	public boolean verifySelected(WebElement ele) {
		try {
			if(ele.isSelected()) {
				System.out.println("The element "+" is selected");
				return true;
			} else {
				System.out.println("The element "+" is not selected");
			}
		} catch (WebDriverException e) {
			System.out.println("WebDriverException : "+e.getMessage());
		}
		return false;
	}
	public void switchToAlert() {
		Alert alert = driver.switchTo().alert();
	}
	public void acceptAlert() {
		String text = "";		
		try {
			Alert alert = driver.switchTo().alert();
			text = alert.getText();
			alert.accept();
			System.out.println("The alert "+text+" is accepted.");
		} catch (NoAlertPresentException e) {
			System.out.println("There is no alert present.");
		} catch (WebDriverException e) {
			System.out.println("WebDriverException : "+e.getMessage());
		}  
	}

	public void dismissAlert() {
		String text = "";		
		try {
			Alert alert = driver.switchTo().alert();
			text = alert.getText();
			alert.dismiss();
			System.out.println("The alert "+text+" is dismissAlert.");
		} catch (NoAlertPresentException e) {
			System.out.println("There is no alert present.");
		} catch (WebDriverException e) {
			System.out.println("WebDriverException : "+e.getMessage());
		}  
	}
	public String getAlertText() {
		String text = "";		
		try {
			Alert alert = driver.switchTo().alert();
			text = alert.getText();
			System.out.println("The alert "+text+" is getText.");
		} catch (NoAlertPresentException e) {
			System.out.println("There is no alert present.");
		} catch (WebDriverException e) {
			System.out.println("WebDriverException : "+e.getMessage());
		} 
		return text;
	}


	public void typeAlert(String data) {
		driver.switchTo().alert().sendKeys(data);

	}
	public void switchToWindow(int index) {
		try {
			Set<String> allWindows = driver.getWindowHandles();
			List<String> allhandles = new ArrayList<>(allWindows);
			String exWindow = allhandles.get(index);
			driver.switchTo().window(exWindow);
			System.out.println("The Window With index: "+index+
					" switched successfully");
		} catch (NoSuchWindowException e) {
			System.err.println("The Window With index: "+index+
					" not found");	
		}
	}


	public void switchToWindow(String title) {
		try {
			Set<String> allWindows = driver.getWindowHandles();
			for (String eachWindow : allWindows) {
				driver.switchTo().window(eachWindow);
				if (driver.getTitle().equals(title)) {
					break;
				}
			}
			System.out.println("The Window With Title: "+title+
					"is switched ");
		} catch (NoSuchWindowException e) {
			System.err.println("The Window With Title: "+title+
					" not found");
		} finally {

		}
	}
}
